function StimParams = StimParamGui()
    % Create handle structure
    h = struct();
    
    h_gui = figure('Name', 'Stimulus Parameter Setting', ...
        'NumberTitle', 'off', ...
        'Position', [500 100 500 840], ...
        'MenuBar', 'none');

    % Sound stimulus parameters panel
    soundPanel = uipanel('Title', 'Sound Stimulus Parameters', ...
        'Position', [.05 .43 .9 .55],...
        'FontSize', 16);

    % Sound type selection with callback
    uicontrol('Parent', soundPanel, ...
        'Style', 'text', ...
        'String', 'Sound Type:', ...
        'Position', [10 400 150 20],...
        'FontSize', 14);
    h.SoundType = uicontrol('Parent', soundPanel, ...
        'Style', 'popup', ...
        'String', {'AM Noise', 'Click Train', 'White Noise', 'Bandpass Noise'}, ...
        'Position', [170 400 150 20],...
        'FontSize', 14,...
        'Callback', @soundTypeChanged);

    % Create parameter panels for each type
    amPanel = uipanel('Parent', soundPanel,...
        'Title', 'AM Noise Parameters',...
        'Position', [0.05 0.1 0.9 0.6],...
        'Visible', 'on');

    clickPanel = uipanel('Parent', soundPanel,...
        'Title', 'Click Train Parameters',...
        'Position', [0.05 0.1 0.9 0.6],...
        'Visible', 'off');

    noisePanel = uipanel('Parent', soundPanel,...
        'Title', 'Noise Parameters',...
        'Position', [0.05 0.1 0.9 0.6],...
        'Visible', 'off');

    % Create controls for each panel
    createAMControls(amPanel);
    createClickControls(clickPanel);
    createNoiseControls(noisePanel);

    % Vibration panel
    vibPanel = uipanel('Title', 'Vibration Stimulus Parameters', ...
        'Position', [.05 .1 .9 .25],...
        'FontSize', 16);
    createVibrationControls(vibPanel);

    % Set button
    uicontrol('Style', 'pushbutton', ...
        'String', 'Set Parameters', ...
        'Position', [150 20 200 30], ...
        'FontSize', 14, ...
        'Callback', @setStimParams);

    function soundTypeChanged(~, ~)
        type = get(h.SoundType, 'Value');
        set(amPanel, 'Visible', 'off');
        set(clickPanel, 'Visible', 'off');
        set(noisePanel, 'Visible', 'off');
        
        switch type
            case 1
                set(amPanel, 'Visible', 'on');
            case 2
                set(clickPanel, 'Visible', 'on');
            case {3, 4}
                set(noisePanel, 'Visible', 'on');
        end
    end

    function createAMControls(parent)
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Position', [10 200 150 20],...
            'FontSize', 14);
        h.AM.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Position', [170 200 100 20],...
            'FontSize', 14);

        % Volume
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Volume (0-1):', ...
            'Position', [10 160 150 20],...
            'FontSize', 14);
        h.AM.Volume = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.3', ...
            'Position', [170 160 100 20],...
            'FontSize', 14);

        % AM Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'AM Frequency (Hz):', ...
            'Position', [10 120 150 20],...
            'FontSize', 14);
        h.AM.Frequency = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '20', ...
            'Position', [170 120 100 20],...
            'FontSize', 14);

        % Other AM controls...
        createRemainingAMControls(parent);
    end

    function createRemainingAMControls(parent)
        % AM Depth
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'AM Depth (0-1):', ...
            'Position', [10 80 150 20],...
            'FontSize', 14);
        h.AM.Depth = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.8', ...
            'Position', [170 80 100 20],...
            'FontSize', 14);

        % Carrier Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Carrier Freq (Hz):', ...
            'Position', [10 40 150 20],...
            'FontSize', 14);
        h.AM.CarrierFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1000', ...
            'Position', [170 40 100 20],...
            'FontSize', 14);

        % Bandwidth
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Bandwidth (Hz):', ...
            'Position', [10 0 150 20],...
            'FontSize', 14);
        h.AM.BandWidth = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '200', ...
            'Position', [170 0 100 20],...
            'FontSize', 14);
    end

    function createClickControls(parent)
        % Click controls structure
        h.Click = struct();
        
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Position', [10 200 150 20],...
            'FontSize', 14);
        h.Click.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Position', [170 200 100 20],...
            'FontSize', 14);

        % Other click parameters...
        createRemainingClickControls(parent);
    end

    function createRemainingClickControls(parent)
        % Click Balance
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Balance:', ...
            'Position', [10 160 150 20],...
            'FontSize', 14);
        h.Click.Balance = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0', ...
            'Position', [170 160 100 20],...
            'FontSize', 14);

        % Click Rate
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Rate (Hz):', ...
            'Position', [10 120 150 20],...
            'FontSize', 14);
        h.Click.Rate = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '10', ...
            'Position', [170 120 100 20],...
            'FontSize', 14);

        % Click Amplitude
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Amplitude (0-1):', ...
            'Position', [10 80 150 20],...
            'FontSize', 14);
        h.Click.Amplitude = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.5', ...
            'Position', [170 80 100 20],...
            'FontSize', 14);

        % Mask Intensity
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Mask Intensity (0-1):', ...
            'Position', [10 40 150 20],...
            'FontSize', 14);
        h.Click.MaskIntensity = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.1', ...
            'Position', [170 40 100 20],...
            'FontSize', 14);
    end

    function createNoiseControls(parent)
        % Noise controls structure
        h.Noise = struct();
        
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Position', [10 200 150 20],...
            'FontSize', 14);
        h.Noise.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Position', [170 200 100 20],...
            'FontSize', 14);

        % Other noise parameters...
        createRemainingNoiseControls(parent);
    end

    function createRemainingNoiseControls(parent)
        % Intensity
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Intensity (0-1):', ...
            'Position', [10 160 150 20],...
            'FontSize', 14);
        h.Noise.Intensity = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.5', ...
            'Position', [170 160 100 20],...
            'FontSize', 14);

        % Low Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Low Freq (Hz):', ...
            'Position', [10 120 150 20],...
            'FontSize', 14);
        h.Noise.LowFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1000', ...
            'Position', [170 120 100 20],...
            'FontSize', 14);

        % High Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'High Freq (Hz):', ...
            'Position', [10 80 150 20],...
            'FontSize', 14);
        h.Noise.HighFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '20000', ...
            'Position', [170 80 100 20],...
            'FontSize', 14);
    end

    function createVibrationControls(parent)
        % Vibration controls structure
        h.Vib = struct();
        
        % Waveform Type
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Waveform Type:', ...
            'Position', [10 150 150 20],...
            'FontSize', 14);
        h.Vib.Type = uicontrol('Parent', parent, ...
            'Style', 'popup', ...
            'String', {'Square', 'UniSine', 'BiSine'}, ...
            'Position', [170 160 150 20],...
            'FontSize', 14);

        % Other vibration parameters...
        createRemainingVibrationControls(parent);
    end

    function createRemainingVibrationControls(parent)
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Position', [10 120 150 20],...
            'FontSize', 14);
        h.Vib.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Position', [170 120 100 20],...
            'FontSize', 14);

        % Amplitude
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Amplitude (V):', ...
            'Position', [10 80 150 20],...
            'FontSize', 14);
        h.Vib.Amplitude = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.5', ...
            'Position', [170 80 100 20],...
            'FontSize', 14);

        % Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Frequency (Hz):', ...
            'Position', [10 40 150 20],...
            'FontSize', 14);
        h.Vib.Frequency = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '100', ...
            'Position', [170 40 100 20],...
            'FontSize', 14);

        % Ramp Time
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Ramp Time (ms):', ...
            'Position', [10 0 150 20],...
            'FontSize', 14);
        h.Vib.Ramp = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '5', ...
            'Position', [170 0 100 20],...
            'FontSize', 14);
    end

    function setStimParams(~, ~)
        soundType = get(h.SoundType, 'Value');
        StimParams.Sound.Type = soundType;
        
        switch soundType
            case 1 % AM Noise
                StimParams.Sound.Duration = str2double(get(h.AM.Duration, 'String'));
                StimParams.Sound.Volume = str2double(get(h.AM.Volume, 'String'));
                StimParams.Sound.AM.Frequency = str2double(get(h.AM.Frequency, 'String'));
                StimParams.Sound.AM.Depth = str2double(get(h.AM.Depth, 'String'));
                StimParams.Sound.AM.CarrierFreq = str2double(get(h.AM.CarrierFreq, 'String'));
                StimParams.Sound.AM.BandWidth = str2double(get(h.AM.BandWidth, 'String'));
                
            case 2 % Click Train
                StimParams.Sound.Duration = str2double(get(h.Click.Duration, 'String'));
                StimParams.Sound.Click.Balance = str2double(get(h.Click.Balance, 'String'));
                StimParams.Sound.Click.Rate = str2double(get(h.Click.Rate, 'String'));
                StimParams.Sound.Click.Amplitude = str2double(get(h.Click.Amplitude, 'String'));
                StimParams.Sound.Click.MaskIntensity = str2double(get(h.Click.MaskIntensity, 'String'));
                
            case {3, 4} % Noise
                StimParams.Sound.Duration = str2double(get(h.Noise.Duration, 'String'));
                StimParams.Sound.Noise.Intensity = str2double(get(h.Noise.Intensity, 'String'));
                StimParams.Sound.Noise.LowFreq = str2double(get(h.Noise.LowFreq, 'String'));
                StimParams.Sound.Noise.HighFreq = str2double(get(h.Noise.HighFreq, 'String'));
        end
        
        % Vibration parameters
        StimParams.Vibration.Type = get(h.Vib.Type, 'String');
        StimParams.Vibration.Duration = str2double(get(h.Vib.Duration, 'String'));
        StimParams.Vibration.Amplitude = str2double(get(h.Vib.Amplitude, 'String'));
        StimParams.Vibration.Frequency = str2double(get(h.Vib.Frequency, 'String'));
        StimParams.Vibration.Ramp = str2double(get(h.Vib.Ramp, 'String'));

        % Save and display parameters
        guidata(h_gui, StimParams);
        disp('Stimulus parameters set:')
        disp(StimParams)
        
        uiresume(h_gui);
    end

    uiwait(h_gui);
    StimParams = guidata(h_gui);
    close(h_gui);
end