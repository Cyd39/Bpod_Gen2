function StimParams = StimParamGui()
    % Create handle structure
    h = struct();
    
    h_gui = figure('Name', 'Stimulus Parameter Setting', ...
        'NumberTitle', 'off', ...
        'Position', [500 100 1000 900], ...
        'MenuBar', 'none');

    % Session type selection (normalized)
    uicontrol('Style', 'text', ...
        'String', 'Session Type:', ...
        'Units', 'normalized', ...
        'Position', [0.06 0.94 0.18 0.03], ...
        'FontSize', 14);
    h.SessionType = uicontrol('Style', 'popup', ...
        'String', {'Multimodal', 'SoundOnly', 'VibrationOnly'}, ...
        'Units', 'normalized', ...
        'Position', [0.25 0.94 0.15 0.03], ...
        'FontSize', 14, ...
        'Callback', @sessionTypeChanged);

    % Stimulus Duration
    uicontrol('Style', 'text', ...
        'String', 'Stimulus Duration(ms):', ...
        'Units', 'normalized', ...
        'Position', [0.02 0.88 0.2 0.03],...
        'FontSize', 14);
    h.Duration = uicontrol('Style', 'edit', ...
        'String', '500', ...
        'Units', 'normalized', ...
        'Position', [0.25 0.88 0.18 0.03],...
        'FontSize', 14);
    

    % Ramp Time
    uicontrol('Style', 'text', ...
        'String', 'Ramp Time(ms):', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.84 0.18 0.03],...
        'FontSize', 14);
    h.Ramp = uicontrol('Style', 'edit', ...
        'String', '5', ...
        'Units', 'normalized', ...
        'Position', [0.25 0.84 0.18 0.03],...
        'FontSize', 14);

    % Sound stimulus parameters panel (normalized)
    soundPanel = uipanel('Title', 'Sound Stimulus Parameters', ...
        'Units', 'normalized', ...
        'Position', [.05 .35 .45 .48],...
        'FontSize', 16);

    % Sound type selection with callback (normalized)
    uicontrol('Parent', soundPanel, ...
        'Style', 'text', ...
        'String', 'Sound Type:', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.87 0.35 0.1],...
        'FontSize', 14);
    h.SoundType = uicontrol('Parent', soundPanel, ...
        'Style', 'popup', ...
        'String', {'AM Noise','Noise Burst',  'Click Train'}, ...
        'Units', 'normalized', ...
        'Position', [0.45 0.87 0.45 0.1],...
        'FontSize', 14,...
        'Callback', @soundTypeChanged);

    % Create parameter panels for each type (normalized)
    amPanel = uipanel('Parent', soundPanel,...
        'Title', 'AM Noise Parameters',...
        'Units', 'normalized', ...
        'Position', [0.05 0.03 0.9 0.84],...
        'Visible', 'on',...
        'FontSize', 12);

    clickPanel = uipanel('Parent', soundPanel,...
        'Title', 'Click Train Parameters',...
        'Units', 'normalized', ...
        'Position', [0.05 0.03 0.9 0.84],...
        'Visible', 'off',...
        'FontSize', 12);

    noisePanel = uipanel('Parent', soundPanel,...
        'Title', 'Noise Parameters',...
        'Units', 'normalized', ...
        'Position', [0.05 0.03 0.9 0.84],...
        'Visible', 'off',...
        'FontSize', 12);

    % Create controls for each panel
    createAMControls(amPanel);
    createClickControls(clickPanel);
    createNoiseControls(noisePanel);

    % Vibration panel (normalized)
    vibPanel = uipanel('Title', 'Vibration Stimulus Parameters', ...
        'Units', 'normalized', ...
        'Position', [.05 .08 .45 .25],...
        'FontSize', 16);
    createVibrationControls(vibPanel);

    % Behavior parameters panel (normalized)
    behavePanel = uipanel('Title', 'Behavior Parameters', ...
        'Units', 'normalized', ...
        'Position', [.52 .08 .43 .85],...
        'FontSize', 16);
    createBehaviorControls(behavePanel);

    % Set button (normalized)
    uicontrol('Style', 'pushbutton', ...
        'String', 'Set Parameters', ...
        'Units', 'normalized', ...
        'Position', [0.4 0.02 0.2 0.05], ...
        'FontSize', 14, ...
        'Callback', @setStimParams);

    function sessionTypeChanged(~, ~)
        sessionType = get(h.SessionType, 'Value');
        
        % Get all controls in sound panel
        soundControls = findall(soundPanel, 'Type', 'uicontrol');
        % Get all controls in vibration panel
        vibControls = findall(vibPanel, 'Type', 'uicontrol');
        
        % Get duration controls
        durationControls = findall(h_gui, 'Tag', 'SepDurControl');
        
        switch sessionType
            case 1 % Multimodal
                % Enable all controls except duration controls
                set(soundControls, 'Enable', 'on');
                set(vibControls, 'Enable', 'on');
                set(durationControls, 'Enable', 'off');
                set(soundPanel, 'Title', 'Sound Stimulus Parameters');
                set(vibPanel, 'Title', 'Vibration Stimulus Parameters');
                
            case 2 % SoundOnly
                % Enable sound controls, disable vibration controls
                set(soundControls, 'Enable', 'on');
                set(vibControls, 'Enable', 'off');
                set(durationControls, 'Enable', 'off');
                set(soundPanel, 'Title', 'Sound Stimulus Parameters');
                set(vibPanel, 'Title', 'Vibration Stimulus Parameters (Disabled)');
                
            case 3 % VibrationOnly
                % Disable sound controls, enable vibration controls
                set(soundControls, 'Enable', 'off');
                set(vibControls, 'Enable', 'on');
                set(durationControls, 'Enable', 'off');
                set(soundPanel, 'Title', 'Sound Stimulus Parameters (Disabled)');
                set(vibPanel, 'Title', 'Vibration Stimulus Parameters');
        end
    end

    function soundTypeChanged(~, ~)
        type = get(h.SoundType, 'Value');
        set(amPanel, 'Visible', 'off');
        set(clickPanel, 'Visible', 'off');
        set(noisePanel, 'Visible', 'off');
        
        switch type
            case 1
                set(amPanel, 'Visible', 'on');
            case 2
                set(noisePanel, 'Visible', 'on');
            case 3
                set(clickPanel, 'Visible', 'on');
        end
    end

    function createAMControls(parent)
        % AM transition time
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'TransTime (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.55 0.4 0.08],...
            'FontSize', 14);
        h.AM.TransitionTime = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.55 0.4 0.08],...
            'FontSize', 14);

        % AM transition duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'TransDur (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.44 0.4 0.08],...
            'FontSize', 14);    
        h.AM.TransitionDuration = uicontrol('Parent', parent, ...   
            'Style', 'edit', ...
            'String', '-1', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.44 0.4 0.08],...
            'FontSize', 14);

        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.33 0.4 0.08],...
            'FontSize', 14);
        h.AM.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.33 0.4 0.08],...
            'FontSize', 14,...
            'Enable', 'off',...
            'Tag', 'SepDurControl');

        % Volume
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Volume (0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.1 0.22 0.4 0.08],...
            'FontSize', 14);
        h.AM.Volume = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.3', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.22 0.4 0.08],...
            'FontSize', 14);

        % AM Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'AM Frequency (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.11 0.5 0.08],...
            'FontSize', 14);
        h.AM.Frequency = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '20', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.11 0.4 0.08],...
            'FontSize', 14);

        % AM Depth
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'AM Depth (0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.88 0.4 0.08],...
            'FontSize', 14);
        h.AM.Depth = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.8', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.88 0.4 0.08],...
            'FontSize', 14);

        % Carrier Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Carrier Freq (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.77 0.4 0.08],...
            'FontSize', 14);
        h.AM.CarrierFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1000', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.77 0.4 0.08],...
            'FontSize', 14);

        % Bandwidth
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Bandwidth (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.66 0.4 0.08],...
            'FontSize', 14);
        h.AM.BandWidth = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '200', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.66 0.4 0.08],...
            'FontSize', 14);
        
        % Boundary Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Boundary Frequency (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.01 0.4 0.08],...
            'FontSize', 14);
        h.AM.BoundaryFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '400', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.01 0.4 0.08],...
            'FontSize', 14);
    end

    function createClickControls(parent)
        % Click controls structure
        h.Click = struct();
        
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.85 0.4 0.1],...
            'FontSize', 14);
        h.Click.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.85 0.4 0.1],...
            'FontSize', 14,...
            'Enable', 'off',...
            'Tag', 'SepDurControl');

        % Click Balance
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Balance:', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.72 0.4 0.1],...
            'FontSize', 14);
        h.Click.Balance = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.72 0.4 0.1],...
            'FontSize', 14);

        % Click Rate
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Rate (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.6 0.4 0.1],...
            'FontSize', 14);
        h.Click.Rate = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '10', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.6 0.4 0.1],...
            'FontSize', 14);

        % Click Amplitude
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Click Amplitude (0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.48 0.4 0.1],...
            'FontSize', 14);
        h.Click.Amplitude = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.5', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.48 0.4 0.1],...
            'FontSize', 14);

        % Mask Intensity
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Mask Intensity (0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.36 0.4 0.1],...
            'FontSize', 14);
        h.Click.MaskIntensity = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.1', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.36 0.4 0.1],...
            'FontSize', 14);
    end

    function createNoiseControls(parent)
        % Noise controls structure
        h.Noise = struct();
        
        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.85 0.4 0.1],...
            'FontSize', 14);
        h.Noise.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.85 0.4 0.1],...
            'FontSize', 14,...
            'Enable', 'off',...
            'Tag', 'SepDurControl');

        % Intensity
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Level (dB):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.72 0.4 0.1],...
            'FontSize', 14);
        h.Noise.Level = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.72 0.4 0.1],...
            'FontSize', 14);

        % Low Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Low Freq (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.6 0.4 0.1],...
            'FontSize', 14);
        h.Noise.LowFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1000', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.6 0.4 0.1],...
            'FontSize', 14);

        % High Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'High Freq (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.48 0.4 0.1],...
            'FontSize', 14);
        h.Noise.HighFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '20000', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.48 0.4 0.1],...
            'FontSize', 14);

        % Logarithmic density
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Log Density:', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.36 0.4 0.1],...
            'FontSize', 14);
        h.Noise.LogDen = uicontrol('Parent', parent, ...
            'Style', 'popup', ...
            'String', {'Yes', 'No'}, ...
            'Units', 'normalized', ...
            'Position', [0.5 0.36 0.2 0.1],...
            'FontSize', 14);
    end

    function createVibrationControls(parent)
        % Vibration controls structure
        h.Vib = struct();
        
        % Waveform Type
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Waveform Type:', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.8 0.4 0.13],...
            'FontSize', 14);
        h.Vib.Type = uicontrol('Parent', parent, ...
            'Style', 'popup', ...
            'String', {'BiSine', 'UniSine', 'Square'}, ...
            'Units', 'normalized', ...
            'Position', [0.5 0.8 0.4 0.13],...
            'FontSize', 14);

        % Duration
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Duration (ms):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.59 0.4 0.13],...
            'FontSize', 14);
        h.Vib.Duration = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '500', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.59 0.4 0.13],...
            'FontSize', 14,...
            'Enable', 'off',...
            'Tag', 'SepDurControl');

        % Amplitude
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Amplitude (V):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.41 0.4 0.13],...
            'FontSize', 14);
        h.Vib.Amplitude = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.5', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.41 0.4 0.13],...
            'FontSize', 14);

        % Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Frequency (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.23 0.4 0.13],...
            'FontSize', 14);
        h.Vib.Frequency = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '100,700', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.23 0.4 0.13],...
            'FontSize', 14);

        % Boundary Frequency
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Boundary Frequency (Hz):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.05 0.4 0.13],...
            'FontSize', 14);
        h.Vib.BoundaryFreq = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '400', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.05 0.4 0.13],...
            'FontSize', 14);

    end

    function createBehaviorControls(parent)
        % ITI parameters
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Inter-Trial Interval (ITI):', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.94 0.55 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Minimum ITI (s):', ...
            'Units', 'normalized', ...
            'Position', [0.2 0.89 0.3 0.04],...
            'FontSize', 12);
        h.Behave.MinITI = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '2', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.89 0.3 0.04],...
            'FontSize', 12);

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Maximum ITI (s):', ...
            'Units', 'normalized', ...
            'Position', [0.2 0.84 0.3 0.04],...
            'FontSize', 12);
        h.Behave.MaxITI = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '3', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.84 0.3 0.04],...
            'FontSize', 12);

        % Quiet time parameters
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Quiet(No-lick) Time:', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.79 0.5 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Minimum Quiet Time (s):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.74 0.5 0.04],...
            'FontSize', 12);
        h.Behave.MinQuietTime = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.74 0.3 0.04],...
            'FontSize', 12);

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Maximum Quiet Time (s):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.69 0.5 0.04],...
            'FontSize', 12);
        h.Behave.MaxQuietTime = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '2', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.69 0.3 0.04],...
            'FontSize', 12);

        % Response window parameters
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Response Window:', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.64 0.5 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Response Window Duration (s):', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.59 0.6 0.04],...
            'FontSize', 12);
        h.Behave.ResWin = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '5', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.59 0.3 0.04],...
            'FontSize', 12);

        % Reward parameters
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Reward Settings:', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.54 0.4 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Reward Amount (µL):', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.49 0.5 0.04],...
            'FontSize', 12);
        h.Behave.RewardAmount = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '2', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.49 0.3 0.04],...
            'FontSize', 12);
        
        % Number of Trials
        uicontrol('Parent',parent,...
            'Style', 'text', ...
            'String', 'Number of Trials & Catch Trials:', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.44 0.75 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Number of Trials:', ...
            'Units', 'normalized', ...
            'Position', [0.2 0.39 0.3 0.04],...
            'FontSize', 12);
        h.Behave.NumTrials = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '160', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.39 0.3 0.04],...
            'FontSize', 12);

        % Percentage of catch trials
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Catch Trial Proportion (0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.02 0.34 0.5 0.04],...
            'FontSize', 12);
        h.Behave.PropCatch = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '0.2', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.34 0.3 0.04],...
            'FontSize', 12);

        % Reward settings
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Reward Settings:', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.29 0.5 0.04],...
            'FontSize', 14,...
            'FontWeight', 'bold');

        % High Freq spout
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', '"High Freq" Spout:', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.24 0.5 0.04],...
            'FontSize', 12);
        h.Behave.CorrectSpout = uicontrol('Parent', parent, ...
            'Style', 'popup', ...
            'String', {'left','right'}, ...
            'Units', 'normalized', ...
            'Position', [0.6 0.24 0.3 0.04],...
            'FontSize', 12);

        % Reward Probability
        uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Reward Probability(0-1):', ...
            'Units', 'normalized', ...
            'Position', [0.01 0.19 0.5 0.04],...
            'FontSize', 12);
        h.Behave.RewardProbability = uicontrol('Parent', parent, ...
            'Style', 'edit', ...
            'String', '1', ...
            'Units', 'normalized', ...
            'Position', [0.6 0.19 0.3 0.04],...
            'FontSize', 12);

        % Error message display area
        h.ErrorMsg = uicontrol('Parent', parent, ...
            'Style', 'text', ...
            'String', 'Error Message will be displayed here', ...
            'Units', 'normalized', ...
            'Position', [0.02 0.01 0.96 0.13],...
            'FontSize', 12,...
            'ForegroundColor', 'red',...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [1 1 1]);
    end

    function setStimParams(~, ~)
        % Clear previous error message
        set(h.ErrorMsg, 'String', '');
        
        try
            % Get session type
            sessionType = get(h.SessionType, 'Value');
            sessionTypeStr = get(h.SessionType, 'String');
            StimParams.Session.Type = sessionType;
            StimParams.Session.TypeName = sessionTypeStr{sessionType};
            
            % get sound type
            soundType = get(h.SoundType, 'Value');
            soundTypeStr = get(h.SoundType, 'String');
            StimParams.Sound.Type = soundType;
            StimParams.Sound.TypeName = soundTypeStr{soundType};
            StimParams.Duration = str2double(get(h.Duration, 'String')); % ms
            StimParams.Ramp = str2double(get(h.Ramp, 'String')); % ms
            
            % Only get sound parameters if not VibrationOnly
            if sessionType ~= 3
                switch soundType
                    case 1 % AM Noise
                        % StimParams.Sound.Duration = str2double(get(h.AM.Duration, 'String'));
                        StimParams.Sound.Volume = str2double(get(h.AM.Volume, 'String'));
                        StimParams.Sound.AM.Frequency = str2double(get(h.AM.Frequency, 'String'));
                        StimParams.Sound.AM.Depth = str2double(get(h.AM.Depth, 'String'));
                        StimParams.Sound.AM.CarrierFreq = str2double(get(h.AM.CarrierFreq, 'String'));
                        StimParams.Sound.AM.BandWidth = str2double(get(h.AM.BandWidth, 'String'));
                        StimParams.Sound.AM.TransTime = str2double(get(h.AM.TransitionTime, 'String'))/1000;
                        StimParams.Sound.AM.TransDur = str2double(get(h.AM.TransitionDuration, 'String'))/1000;
                        StimParams.Sound.AM.BoundaryFreq = str2double(get(h.AM.BoundaryFreq, 'String'));                   

                    case 2 % NoiseBurst
                        % StimParams.Sound.Duration = str2double(get(h.Noise.Duration, 'String'));
                        StimParams.Sound.Noise.LowFreq = str2double(get(h.Noise.LowFreq, 'String'));
                        StimParams.Sound.Noise.HighFreq = str2double(get(h.Noise.HighFreq, 'String'));
                        if get(h.Noise.LogDen, 'Value') == 1    
                            StimParams.Sound.Noise.LogDen = 1;
                        else
                            StimParams.Sound.Noise.LogDen = 0;
                        end
                        % Handle Noise Level input
                        levelStr = get(h.Noise.Level, 'String');
                        try
                            % First try to handle comma-separated numbers
                            if contains(levelStr, ',')
                                % Split by comma and convert to numbers
                                parts = strsplit(levelStr, ',');
                                parts = cellfun(@str2double, parts, 'UniformOutput', false);
                                if all(~cellfun(@isnan, parts))
                                    StimParams.Sound.Noise.Level = cell2mat(parts)';
                                else
                                    error('Invalid number format in comma-separated list');
                                end
                            else
                                % Try to evaluate the string as a MATLAB expression
                                levelValue = eval(levelStr);
                                % Convert to column vector if it's a row vector
                                if size(levelValue, 1) == 1
                                    levelValue = levelValue';
                                end
                                StimParams.Sound.Noise.Level = levelValue;
                            end
                        catch
                            % If evaluation fails, try to parse as a range
                            try
                                % Split the string by ':'
                                parts = strsplit(levelStr, ':');
                                % Convert all parts to numbers
                                parts = cellfun(@str2double, parts, 'UniformOutput', false);
                                % Check if all parts are valid numbers
                                if all(~cellfun(@isnan, parts))
                                    switch length(parts)
                                        case 1
                                            % Single value
                                            StimParams.Sound.Noise.Level = parts{1};
                                        case 2
                                            % Start:End (default step = 1)
                                            StimParams.Sound.Noise.Level = (parts{1}:parts{2})';
                                        case 3
                                            % Start:Step:End
                                            StimParams.Sound.Noise.Level = (parts{1}:parts{2}:parts{3})';
                                        otherwise
                                            % Multiple values separated by colons
                                            StimParams.Sound.Noise.Level = cell2mat(parts)';
                                    end
                                else
                                    error('Invalid number format in range');
                                end
                            catch
                                error(sprintf(['Invalid Noise Level format. Please use one of these formats:' char(10) ...
                                    '- Comma separated: "4,5,10"' char(10) ...
                                    '- Space separated: "[4 5 10]"' char(10) ...
                                    '- Range with step: "0:5:60"']));
                            end
                        end
                        
                    case 3 % Click Train
                        % StimParams.Sound.Duration = str2double(get(h.Click.Duration, 'String'));
                        StimParams.Sound.Click.Balance = str2double(get(h.Click.Balance, 'String'));
                        StimParams.Sound.Click.Rate = str2double(get(h.Click.Rate, 'String'));
                        StimParams.Sound.Click.Amplitude = str2double(get(h.Click.Amplitude, 'String'));
                        StimParams.Sound.Click.MaskIntensity = str2double(get(h.Click.MaskIntensity, 'String'));
                end
            end
            
            % Only get vibration parameters if not SoundOnly
            if sessionType ~= 2
                % Vibration parameters
                vibType = get(h.Vib.Type, 'Value');
                vibTypeName = get(h.Vib.Type, 'String');
                StimParams.Vibration.Type = vibType;
                StimParams.Vibration.TypeName = vibTypeName{vibType};
                % StimParams.Vibration.Duration = str2double(get(h.Vib.Duration, 'String'));
                
                % Handle Vibration Amplitude input with range check
                ampStr = get(h.Vib.Amplitude, 'String');
                try
                    % First try to handle comma-separated numbers
                    if contains(ampStr, ',')
                        % Split by comma and convert to numbers
                        parts = strsplit(ampStr, ',');
                        parts = cellfun(@str2double, parts, 'UniformOutput', false);
                        if all(~cellfun(@isnan, parts))
                            ampValue = cell2mat(parts)';
                            % Check if all values are within range [0,1]
                            if any(ampValue < 0) || any(ampValue > 1)
                                error('Amplitude values must be between 0 and 1');
                            end
                            StimParams.Vibration.Amplitude = ampValue;
                        else
                            error('Invalid number format in comma-separated list');
                        end
                    else
                        % Try to evaluate the string as a MATLAB expression
                        ampValue = eval(ampStr);
                        % Convert to column vector if it's a row vector
                        if size(ampValue, 1) == 1
                            ampValue = ampValue';
                        end
                        % Check if all values are within range [0,1]
                        if any(ampValue < 0) || any(ampValue > 1)
                            error('Amplitude values must be between 0 and 1');
                        end
                        StimParams.Vibration.Amplitude = ampValue;
                    end
                catch
                    % If evaluation fails, try to parse as a range
                    try
                        % Split the string by ':'
                        parts = strsplit(ampStr, ':');
                        % Convert all parts to numbers
                        parts = cellfun(@str2double, parts, 'UniformOutput', false);
                        % Check if all parts are valid numbers
                        if all(~cellfun(@isnan, parts))
                            switch length(parts)
                                case 1
                                    % Single value
                                    ampValue = parts{1};
                                case 2
                                    % Start:End (default step = 1)
                                    ampValue = (parts{1}:parts{2})';
                                case 3
                                    % Start:Step:End
                                    ampValue = (parts{1}:parts{2}:parts{3})';
                                otherwise
                                    % Multiple values separated by colons
                                    ampValue = cell2mat(parts)';
                            end
                            % Check if all values are within range [0,1]
                            if any(ampValue < 0) || any(ampValue > 1)
                                error('Amplitude values must be between 0 and 1');
                            end
                            StimParams.Vibration.Amplitude = ampValue;
                        else
                            error('Invalid number format in range');
                        end
                    catch
                        error(sprintf(['Invalid Amplitude format. Please use one of these formats:' char(10) ...
                            '- Comma separated: "0.2,0.5,0.8"' char(10) ...
                            '- Space separated: "[0.2 0.5 0.8]"' char(10) ...
                            '- Range with step: "0:0.1:1"' char(10) ...
                            'All values must be between 0 and 1']));
                    end
                end

                % Handle Vibration Frequency input
                freqStr = get(h.Vib.Frequency, 'String');
                try
                    % First try to handle comma-separated numbers
                    if contains(freqStr, ',')
                        % Split by comma and convert to numbers
                        parts = strsplit(freqStr, ',');
                        parts = cellfun(@str2double, parts, 'UniformOutput', false);
                        if all(~cellfun(@isnan, parts))
                            StimParams.Vibration.Frequency = cell2mat(parts)';
                        else
                            error('Invalid number format in comma-separated list');
                        end
                    else
                        % Try to evaluate the string as a MATLAB expression
                        freqValue = eval(freqStr);
                        % Convert to column vector if it's a row vector
                        if size(freqValue, 1) == 1
                            freqValue = freqValue';
                        end
                        StimParams.Vibration.Frequency = freqValue;
                    end
                catch
                    % If evaluation fails, try to parse as a range
                    try
                        % Split the string by ':'
                        parts = strsplit(freqStr, ':');
                        % Convert all parts to numbers
                        parts = cellfun(@str2double, parts, 'UniformOutput', false);
                        % Check if all parts are valid numbers
                        if all(~cellfun(@isnan, parts))
                            switch length(parts)
                                case 1
                                    % Single value
                                    StimParams.Vibration.Frequency = parts{1};
                                case 2
                                    % Start:End (default step = 1)
                                    StimParams.Vibration.Frequency = (parts{1}:parts{2})';
                                case 3
                                    % Start:Step:End
                                    StimParams.Vibration.Frequency = (parts{1}:parts{2}:parts{3})';
                                otherwise
                                    % Multiple values separated by colons
                                    StimParams.Vibration.Frequency = cell2mat(parts)';
                            end
                        else
                            error('Invalid number format in range');
                        end
                    catch
                        error(sprintf(['Invalid Frequency format. Please use one of these formats:' char(10) ...
                            '- Comma separated: "100,200,300"' char(10) ...
                            '- Space separated: "[100 200 300]"' char(10) ...
                            '- Range with step: "100:50:300"']));
                    end
                end

                % Handle Vibration Boundary Frequency input
                StimParams.Vibration.BoundaryFreq = str2double(get(h.Vib.BoundaryFreq, 'String'));
            end

            % Behavior parameters
            StimParams.Behave.MinITI = str2double(get(h.Behave.MinITI, 'String'));
            StimParams.Behave.MaxITI = str2double(get(h.Behave.MaxITI, 'String'));
            StimParams.Behave.MinQuietTime = str2double(get(h.Behave.MinQuietTime, 'String'));
            StimParams.Behave.MaxQuietTime = str2double(get(h.Behave.MaxQuietTime, 'String'));
            StimParams.Behave.ResWin = str2double(get(h.Behave.ResWin, 'String'));
            StimParams.Behave.RewardAmount = str2double(get(h.Behave.RewardAmount, 'String'));
            StimParams.Behave.NumTrials = str2double(get(h.Behave.NumTrials, 'String'));
            
            % Validate catch trial proportion
            propCatch = str2double(get(h.Behave.PropCatch, 'String'));
            if propCatch < 0 || propCatch > 1
                error('Catch trial proportion must be between 0 and 1');
            end
            StimParams.Behave.PropCatch = propCatch;

            % Validate reward probability
            rewardProb = str2double(get(h.Behave.RewardProbability, 'String'));
            if isnan(rewardProb) || rewardProb < 0 || rewardProb > 1
                error('Reward probability must be a number between 0 and 1');
            end
            StimParams.Behave.RewardProbability = rewardProb;

            % Get correct spout selection
            correctSpout = get(h.Behave.CorrectSpout, 'Value');
            correctSpoutStr = get(h.Behave.CorrectSpout, 'String');
            StimParams.Behave.CorrectSpout = correctSpout;
            StimParams.Behave.CorrectSpoutName = correctSpoutStr{correctSpout};

            % Save and display parameters
            guidata(h_gui, StimParams);
            disp('Stimulus parameters set:')
            disp(StimParams)
            
            uiresume(h_gui);
        catch ME
            % Display error message in the error area
            set(h.ErrorMsg, 'String', ME.message);
        end
    end

    uiwait(h_gui);
    close(h_gui);
end